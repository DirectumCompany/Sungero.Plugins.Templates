<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
    Ниже код формирования manifest-файлов и пакетов с плагином.
    ВАЖНО. Следующий код не рекомендуется изменять.
  -->
  <Target Name="PackWindowsPlugin" Condition="'$(TargetFramework.TrimEnd(`0123456789`))' == 'net'">
    <PropertyGroup>
      <OutputDirectory>$(ProjectDir)\..\..\out\Client\</OutputDirectory>
      <TempPath>$(OutputDirectory)\tmp_win\</TempPath>
      <AssembliesPath>$(TempPath)\$(OutputPath.Replace($(TargetFramework), &quot;&quot;))</AssembliesPath>
      <ZipSourcePath>$(AssembliesPath)..\..\..\</ZipSourcePath>
      <ZipDestinationFile>$(OutputDirectory)\$(AssemblyName)_win.zip</ZipDestinationFile>
    </PropertyGroup>
    <ItemGroup>
      <CopySourceFiles Include="$(OutputPath)*.*"/>
    </ItemGroup>
    <MakeDir Directories="$(AssembliesPath)"/>
    <Copy SourceFiles="@(CopySourceFiles)" DestinationFolder="$(AssembliesPath)"/>
    <ZipDirectory SourceDirectory="$(ZipSourcePath)" DestinationFile="$(ZipDestinationFile)" Overwrite="true"/>
    <RemoveDir Directories="$(TempPath)"/>
  </Target>
  <Target Name="PackLinuxPlugin" Condition="'$(TargetFramework.TrimEnd(`0123456789.`))' == 'netstandard' And '$(BuildLinuxPlugin)' == 'true'">
    <PropertyGroup>
      <OutputDirectory>$(ProjectDir)\..\..\out\Client\</OutputDirectory>
      <DotNetRuntimeDirectory>$(ProjectDir)\..\..\redist\linux-dotnet-runtime\</DotNetRuntimeDirectory>
      <TempPath>$(OutputDirectory)\tmp_linux\</TempPath>
      <AssembliesPath>$(TempPath)\$(OutputPath.Replace($(TargetFramework), &quot;&quot;))</AssembliesPath>
      <ZipSourcePath>$(AssembliesPath)..\..\..\</ZipSourcePath>
      <ZipDestinationFile>$(OutputDirectory)\$(AssemblyName)_linux.zip</ZipDestinationFile>
    </PropertyGroup>
    <ItemGroup>
      <CopySourceFiles Include="$(OutputPath)*.*"/>
      <CopyDotNetLinuxRuntimeFiles Include="$(DotNetRuntimeDirectory)\**\*.*"/>
    </ItemGroup>
    <MakeDir Directories="$(AssembliesPath)"/>
    <Copy SourceFiles="@(CopySourceFiles)" DestinationFolder="$(AssembliesPath)"/>
    <Copy SourceFiles="@(CopyDotNetLinuxRuntimeFiles)" DestinationFolder="$(AssembliesPath)\runtime\%(RecursiveDir)"/>
    <ZipDirectory SourceDirectory="$(ZipSourcePath)" DestinationFile="$(ZipDestinationFile)" Overwrite="true"/>
    <RemoveDir Directories="$(TempPath)"/>
  </Target>
  <Target Name="PackMacOsPlugin" Condition="'$(TargetFramework.TrimEnd(`0123456789.`))' == 'netstandard' And '$(BuildMacOsPlugin)' == 'true'">
    <PropertyGroup>
      <OutputDirectory>$(ProjectDir)\..\..\out\Client\</OutputDirectory>
      <DotNetRuntimeDirectory>$(ProjectDir)\..\..\redist\macos-dotnet-runtime\</DotNetRuntimeDirectory>
      <TempPath>$(OutputDirectory)\tmp_mac\</TempPath>
      <AssembliesPath>$(TempPath)\$(OutputPath.Replace($(TargetFramework), &quot;&quot;))</AssembliesPath>
      <ZipSourcePath>$(AssembliesPath)..\..\..\</ZipSourcePath>
      <ZipDestinationFile>$(OutputDirectory)\$(AssemblyName)_mac.zip</ZipDestinationFile>
    </PropertyGroup>
    <ItemGroup>
      <CopySourceFiles Include="$(OutputPath)*.*"/>
      <CopyDotNetMacRuntimeFiles Include="$(DotNetRuntimeDirectory)\**\*.*"/>
    </ItemGroup>
    <MakeDir Directories="$(AssembliesPath)"/>
    <Copy SourceFiles="@(CopySourceFiles)" DestinationFolder="$(AssembliesPath)"/>
    <Copy SourceFiles="@(CopyDotNetMacRuntimeFiles)" DestinationFolder="$(AssembliesPath)\runtime\%(RecursiveDir)"/>
    <ZipDirectory SourceDirectory="$(ZipSourcePath)" DestinationFile="$(ZipDestinationFile)" Overwrite="true"/>
    <RemoveDir Directories="$(TempPath)"/>
  </Target>
  <Target Name="PostBuild" AfterTargets="PostBuildEvent">
    <PropertyGroup>
      <PluginManifestContent Condition="'$(BuildLinuxPlugin)' != 'true' And '$(BuildMacOsPlugin)' != 'true'">
{
  "Windows": {
    "{$(PluginId.ToUpper())}": "$(TargetFileName)"
  }
}
      </PluginManifestContent>
      <PluginManifestContent Condition="'$(BuildLinuxPlugin)' == 'true' And '$(BuildMacOsPlugin)' != 'true'">
{
  "Windows": {
    "{$(PluginId.ToUpper())}": "$(TargetFileName)"
  },
  "Linux": {
    "{$(PluginId.ToUpper())}": "$(TargetFileName)"
  }
}
      </PluginManifestContent>
      <PluginManifestContent Condition="'$(BuildLinuxPlugin)' != 'true' And '$(BuildMacOsPlugin)' == 'true'">
{
  "Windows": {
    "{$(PluginId.ToUpper())}": "$(TargetFileName)"
  },
  "Darwin": {
    "{$(PluginId.ToUpper())}": "$(TargetFileName)"
  }
}
      </PluginManifestContent>
      <PluginManifestContent Condition="'$(BuildLinuxPlugin)' == 'true' And '$(BuildMacOsPlugin)' == 'true'">
{
  "Windows": {
    "{$(PluginId.ToUpper())}": "$(TargetFileName)"
  },
  "Linux": {
    "{$(PluginId.ToUpper())}": "$(TargetFileName)"
  },
  "Darwin": {
    "{$(PluginId.ToUpper())}": "$(TargetFileName)"
  }
}
      </PluginManifestContent>
      <PluginPackageManifestContent Condition="'$(BuildLinuxPlugin)' != 'true' And '$(BuildMacOsPlugin)' != 'true'">
[{
  "name": "$(AssemblyName)",
  "platform": "win32",
  "file": "plugins/$(AssemblyName)_win.zip",
  "preloaded": false,
  "version": "$(PluginVersion)",
  "guid": "$(PluginId.ToUpper())",
  "dependencies": ["cryptographyplugin"]
}]
      </PluginPackageManifestContent>
      <PluginPackageManifestContent Condition="'$(BuildLinuxPlugin)' == 'true' And '$(BuildMacOsPlugin)' != 'true'">
[{
  "name": "$(AssemblyName)",
  "platform": "win32",
  "file": "plugins/$(AssemblyName)_win.zip",
  "preloaded": false,
  "version": "$(PluginVersion)",
  "guid": "$(PluginId.ToUpper())",
  "dependencies": ["cryptographyplugin"]
},
{
  "name": "$(AssemblyName)",
  "platform": "linux64",
  "file": "plugins/$(AssemblyName)_linux.zip",
  "preloaded": false,
  "version": "$(PluginVersion)",
  "guid": "$(PluginId.ToUpper())",
  "dependencies": ["cryptographyplugin"]
}]
      </PluginPackageManifestContent>
      <PluginPackageManifestContent Condition="'$(BuildLinuxPlugin)' != 'true' And '$(BuildMacOsPlugin)' == 'true'">
[{
  "name": "$(AssemblyName)",
  "platform": "win32",
  "file": "plugins/$(AssemblyName)_win.zip",
  "preloaded": false,
  "version": "$(PluginVersion)",
  "guid": "$(PluginId.ToUpper())",
  "dependencies": ["cryptographyplugin"]
},
{
  "name": "$(AssemblyName)",
  "platform": "mac64",
  "file": "plugins/$(AssemblyName)_mac.zip",
  "preloaded": false,
  "version": "$(PluginVersion)",
  "guid": "$(PluginId.ToUpper())",
  "dependencies": ["cryptographyplugin"]
}]
      </PluginPackageManifestContent>
      <PluginPackageManifestContent Condition="'$(BuildLinuxPlugin)' == 'true' And '$(BuildMacOsPlugin)' == 'true'">
[{
  "name": "$(AssemblyName)",
  "platform": "win32",
  "file": "plugins/$(AssemblyName)_win.zip",
  "preloaded": false,
  "version": "$(PluginVersion)",
  "guid": "$(PluginId.ToUpper())",
  "dependencies": ["cryptographyplugin"]
},
{
  "name": "$(AssemblyName)",
  "platform": "linux64",
  "file": "plugins/$(AssemblyName)_linux.zip",
  "preloaded": false,
  "version": "$(PluginVersion)",
  "guid": "$(PluginId.ToUpper())",
  "dependencies": ["cryptographyplugin"]
},
{
  "name": "$(AssemblyName)",
  "platform": "mac64",
  "file": "plugins/$(AssemblyName)_mac.zip",
  "preloaded": false,
  "version": "$(PluginVersion)",
  "guid": "$(PluginId.ToUpper())",
  "dependencies": ["cryptographyplugin"]
}]
      </PluginPackageManifestContent>
      <OutputDirectory>$(ProjectDir)\..\..\out\Client\</OutputDirectory>
    </PropertyGroup>
    <WriteLinesToFile File="$(OutputPath)\manifest.json" Lines="$(PluginManifestContent)" Overwrite="true"/>
    <MakeDir Directories="$(OutputDirectory)"/>
    <CallTarget Targets="PackWindowsPlugin"/>
    <CallTarget Targets="PackLinuxPlugin"/>
    <CallTarget Targets="PackMacOsPlugin"/>
    <WriteLinesToFile File="$(OutputDirectory)\$(AssemblyName).json" Lines="$(PluginPackageManifestContent)" Overwrite="true"/>
  </Target>
</Project>
